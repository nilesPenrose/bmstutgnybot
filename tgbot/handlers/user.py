from datetime import datetime

import aiogram
import psycopg2
import qrcode
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.deep_linking import get_start_link
from qrcode.image.styledpil import StyledPilImage
from qrcode.image.styles.moduledrawers import RoundedModuleDrawer, GappedSquareModuleDrawer, CircleModuleDrawer, VerticalBarsDrawer, SquareModuleDrawer, HorizontalBarsDrawer
from qrcode.image.styles.colormasks import RadialGradiantColorMask
from tgbot.misc.states import Form, UserEvents
from .template_messages.user_messages import vk_page, study_group, birthday, phone_number, food_feature, \
    evening_event, media_files, summary_msg, start_message, name_messages
from tgbot.keyboards.reply import of_course
from ..middlewares.throttling import rate_limit

async def qr_code_registry(user_chat_id):
    link = await get_start_link(f'{user_chat_id}', encode=True)
    print(str(link))
    qr = qrcode.QRCode(
        version=3,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(link)
    qr.make(fit=True)
    img_2 = qr.make_image(image_factory=StyledPilImage,
                          color_mask=RadialGradiantColorMask(
                              back_color=(255, 255, 255),
                              center_color=(51, 255, 255),
                              edge_color=(0, 0, 153)
                          ),
                          module_drawer=SquareModuleDrawer())

    img_2.save('./qr.png')
    return "ok"

def check_date(date: str):
    date_format = "%d.%m.%Y"
    res = True
    try:
        res = bool(datetime.strptime(date, date_format))
    except ValueError:
        res = False
    return res

def check_phone(phone: str):
    if len(phone) == 12 or len(phone) == 11:
        return True
    else:
        return False

def check_tag(msg: str):
    for ch in msg:
        if ch in "<>'?|!@#$%^&*":
            msg = msg.replace(ch, '_')
    print(msg)
    return msg


@rate_limit(40)
async def user_start(message: Message, state: FSMContext):
    state_name = await state.get_state()
    print(state_name)
    print(type(state_name))

    if state_name is None:
        print(message.chat.username, message.chat.id)
        await Form.start.set()
        await message.reply(start_message,
                            reply_markup=of_course)
    else:
        await message.reply("—Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥—Ä—É–≥ –º–æ–π",
                            reply_markup=ReplyKeyboardRemove())


@rate_limit(5)
async def process_start(message: Message, state: FSMContext):
    if message.text == "–ö–æ–Ω–µ—á–Ω–æ‚ùÑÔ∏è":
        await Form.next()
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –§–ò–û",
                            reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)", reply_markup=of_course)


@rate_limit(5)
async def process_name(message: Message, state: FSMContext):
    print(message.text, message.chat.username)

    msg = check_tag(message.text)

    async with state.proxy() as data:
        data['chat_id'] = message.chat.id
        data['name'] = msg
    await Form.next()
    await message.reply(vk_page)

@rate_limit(5)
async def process_vk_page(message: Message, state: Form.vk_page):
    print(message.text, message.chat.username)
    msg = check_tag(message.text)
    if msg.lower() == "–Ω–µ—Ç":
        await message.answer("–ø–æ–Ω—è—Ç–Ω–æ, –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º")
        await state.update_data(vk_page=str(message.text))
        await Form.next()
        await message.answer(study_group)
        return 0

    if msg.find('vk.com/') == -1:
        await message.answer("—Å–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'vk.com/quasinp'")
    else:
        await state.update_data(vk_page=str(msg))
        await Form.next()
        await message.answer(study_group)

@rate_limit(5)
async def process_group(message: Message, state: Form.study_group):
    print(message.text, message.chat.username)
    msg = check_tag(message.text)

    async with state.proxy() as data:
        data['study_group'] = msg
    await Form.next()
    await message.answer(birthday)

@rate_limit(5)
async def process_birthday(message: Message, state: Form.birthday):
    if not check_date(message.text):
        await message.reply("–≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")
    else:
        print(message.text, message.chat.username)
        async with state.proxy() as data:
            data['birthday'] = message.text
        await Form.next()
        await message.answer(phone_number)

@rate_limit(5)
async def process_phone(message: Message, state: Form.phone_number):
    print(message.text, message.chat.username)
    if not check_phone(message.text):
        await message.reply("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç." + phone_number)
    else:
        async with state.proxy() as data:
            print(data)
            data['phone_number'] = message.text
        await Form.next()
        await message.answer(food_feature)

@rate_limit(5)
async def process_food_features(message: Message, state: Form.food_feature):
    print(message.text, message.chat.username)
    msg = check_tag(message.text)
    async with state.proxy() as data:
        print(data)
        data['food_feature'] = msg
    await Form.next()
    await message.answer(evening_event)

@rate_limit(5)
async def process_event_description(message: Message, state: Form.evening_event):
    print(message.text, message.chat.username)
    msg = check_tag(message.text)
    async with state.proxy() as data:
        data['evening_event'] = msg
    await Form.next()
    await message.answer(media_files)

@rate_limit(5)
async def process_media(message: Message, state: Form.media_files):
    print(message.text, message.chat.username)
    await message.reply("""–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã, —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º 
    —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞ –≤—ã–µ–∑–¥ –∏, 
    –∫–æ–Ω–µ—á–Ω–æ –∂–µ, —Å–∞–º—ã–π –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—ã–π –ú–∞—Å–∫–∞—Ä–∞–¥ üåü""")
    msg = check_tag(message.text)
    async with state.proxy() as data:
        data['media_files'] = msg
        markup = ReplyKeyboardRemove()
        await message.bot.send_message(message.chat.id,
                                       text=summary_msg.substitute(name=data['name'], vk_page=data['vk_page'],
                                                                   study_group=data['study_group'],
                                                                   birthday=data['birthday'],
                                                                   phone_number=data['phone_number'],
                                                                   food_feature=data['food_feature'],
                                                                   evening_event=data['evening_event'],
                                                                   media_files=data['media_files']))

        print(data)

        connection = psycopg2.connect(host="127.0.0.1", port="5432", dbname="new_year", user="postgres",
                                      password="qwerty")
        cursor = connection.cursor()
        postgres_insert_query = """ INSERT INTO clients (chat_id, username, phone, vk_page, study_group, 
                                        birthday, evening_event, media) VALUES (%s,%s,%s, %s,%s,%s, %s,%s)
                                        on conflict (chat_id) do update set username = EXCLUDED.username, 
                                        phone = EXCLUDED.phone, vk_page = EXCLUDED.vk_page, 
                                        study_group= EXCLUDED.study_group, birthday= EXCLUDED.birthday, 
                                        evening_event= EXCLUDED.evening_event, media= EXCLUDED.media;"""

        record_to_insert = (data['chat_id'], data['name'], data['phone_number'], data['vk_page'], data['study_group'],
                            data['birthday'], data['evening_event'], data['media_files'])
        cursor.execute(postgres_insert_query, record_to_insert)
        connection.commit()
        count = cursor.rowcount
        if count:
            await message.bot.send_message(message.chat.id, "—Ç–≤–æ—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n")
        print(count, "Record inserted successfully into mobile table")
        cursor.close()
        connection.close()

    await UserEvents.main_menu.set()
    await message.bot.send_message(message.chat.id, text="–ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö "
                                                         "–æ—à–∏–±–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: '/help'")


@rate_limit(5)
async def user_menu(message: Message, state: UserEvents.main_menu):
    st = await state.get_state()
    print("CONFIRM ERROR", st)
    if message.text == "–ù–µ—Ç":
        await message.answer("–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ –≤ —ç—Ç–æ—Ç —Ä–∞–∑, –Ω–æ —É —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–µ—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ (https://vk.com/studsovet_bmstu). –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –¥–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—áüéÅ", reply_markup=ReplyKeyboardRemove())
        connection = psycopg2.connect(host="127.0.0.1", port="5432", dbname="new_year", user="postgres",
                                      password="qwerty")
        cursor = connection.cursor()

        query = "update clients set confirm='no' where chat_id={};".format(message.chat.id)
        cursor.execute(query)
        connection.commit()
        count = cursor.rowcount
        print("confirm {}".format(count))
        cursor.close()
        connection.close()
        await message.bot.send_message(392875761, "–ù–ï–¢")

    elif message.text == "–î–êüåü":
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ç–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π qr-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—à–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç—ä–µ–∑–¥–æ–º. –¢–æ–ª—å–∫–æ –ø–æ –Ω–µ–º—É —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –Ω–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –º–æ–∂–µ—à—å –∏—Ö –∑–∞–¥–∞—Ç—å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ (http://t.me/cot_boris_13). –£–≤–∏–¥–∏–º—Å—è 16 –¥–µ–∫–∞–±—Ä—è –≤ 18:30üéÑ", reply_markup=ReplyKeyboardRemove())
        connection = psycopg2.connect(host="127.0.0.1", port="5432", dbname="new_year", user="postgres",
                                      password="qwerty")
        cursor = connection.cursor()

        query = "update clients set confirm='yes' where chat_id={};".format(message.chat.id)
        cursor.execute(query)
        connection.commit()
        count = cursor.rowcount
        await message.bot.send_message(392875761, "–î–ê")
        print("confirm {}".format(count))
        cursor.close()
        connection.close()
        await qr_code_registry(int(message.chat.id))
        ph = open("./qr.png", "rb")
        await message.bot.send_photo(int(message.chat.id), ph)
        ph.close()
    else:
        await message.answer("–∞ —Ç—ã –∑–Ω–∞–ª, —á—Ç–æ –≤ –º–∏—Ä–µ –Ω–∞—Å —É–∂–µ 8 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤?")

async def user_help(message: Message):
    await message.reply("–∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:"
                        "\nhttps://t.me/niles_penrose,\nhttps://t.me/cot_boris_13,\nhttps://t.me/andrew_yas")
                        #\nhttps://t.me/true_psinu

def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*", is_admin=False)
    dp.register_message_handler(user_help, commands=["help"], state="*")
    dp.register_message_handler(process_start, state=Form.start, is_sticker=False)
    dp.register_message_handler(process_name, state=Form.name, is_sticker=False)
    dp.register_message_handler(process_vk_page, state=Form.vk_page, is_sticker=False)
    dp.register_message_handler(process_group, state=Form.study_group, is_sticker=False)
    dp.register_message_handler(process_birthday, state=Form.birthday, is_sticker=False)
    dp.register_message_handler(process_phone, state=Form.phone_number, is_sticker=False)
    dp.register_message_handler(process_food_features, state=Form.food_feature, is_sticker=False)
    dp.register_message_handler(process_event_description, state=Form.evening_event, is_sticker=False)
    dp.register_message_handler(process_media, state=Form.media_files, is_sticker=False)
    dp.register_message_handler(user_menu, state=UserEvents.main_menu, is_sticker=False)



